generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String  @id @default(cuid())
  name       String
  email      String  @unique
  password   String
  avatar     String?
  isVerified Boolean @default(false)
  role       Role    @default(USER)
  questions  Question[]
  answers    Answer[]
  votes      Vote[]
  comments   Comment[]

  

  Job Job[]
}

model Job {
  id             String   @id @default(cuid())
  userId         String
  title          String
  description    String?
  companyName    String   @map("company_name")
  companyBio     String   @map("company_bio")
  companyEmail   String   @map("company_email")
  category       String 
  type           String
  workMode       WorkMode @map("work_mode")
  currency       Currency @default(INR)
  city           String
  address        String
  application    String
  companyLogo    String 
  hasSalaryRange Boolean  @default(false) @map("has_salary_range")
  minSalary      Int?
  maxSalary      Int?
  isVerifiedJob  Boolean  @default(false) @map("is_verified_job")
  postedAt       DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
}

enum Currency {
  INR
  USD
}

enum WorkMode {
  remote
  hybrid
  office
}

enum Role {
  USER
  ADMIN
}

model Community {
  id              String   @id @default(cuid())
  name            String   
  description     String?
  questions       Question[]  // Relation to the questions
}

model Question {
  id              String    @id @default(cuid())
  title           String
  body            String
  postedBy        User      @relation(fields: [userId], references: [id])
  userId          String
  community       Community @relation(fields: [communityId], references: [id])
  communityId     String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  answers         Answer[]  // Relation to the answers
  votes           Vote[]    // Relation to votes for upvote/downvote
  comments        Comment[] // Relation to comments
}

model Answer {
  id              String    @id @default(cuid())
  body            String
  postedBy        User      @relation(fields: [userId], references: [id])
  userId          String
  question        Question  @relation(fields: [questionId], references: [id])
  questionId      String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  votes           Vote[]    // Relation to votes for upvote/downvote
  comments        Comment[] // Relation to comments
}
model Vote {
  id              String    @id @default(cuid())
  value           Int       // 1 for upvote, -1 for downvote
  user            User      @relation(fields: [userId], references: [id])
  userId          String
  question        Question? @relation(fields: [questionId], references: [id])
  questionId      String?
  answer          Answer?   @relation(fields: [answerId], references: [id])
  answerId        String?
  createdAt       DateTime  @default(now())
}

model Comment {
  id              String    @id @default(cuid())
  body            String
  postedBy        User      @relation(fields: [userId], references: [id])
  userId          String
  question        Question? @relation(fields: [questionId], references: [id])
  questionId      String?
  answer          Answer?   @relation(fields: [answerId], references: [id])
  answerId        String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}